name: Test & Release

on:
  push:
    branches:
      - main
  pull_request:


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'
      - name: Install deps
        run: pip install -U maturin
      - name: Build sdist
        run: maturin build --release --strip
      - uses: actions/upload-artifact@v2
        with:
          path: ./target/wheels/*.tar.gz
          name: dist
  build_wheels:
    name: Build wheels on ${{ matrix.os }} / Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        # For CPython only build 3.7 since we use the abi3 limited API
        # For PyPy, build all versions
        python: ["3.7", "pypy-3.7", "pypy-3.8"]
        include:
          - python: "pypy-3.7"
            cibw_build: "pp37*"
          - python: "pypy-3.8"
            cibw_build: "pp38*"
          - python: "3.7"
            cibw_build: "cp37-*"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - uses: actions-rs/toolchain@v1
        if: runner.os != 'Linux'
        with:
          toolchain: stable
          profile: minimal
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel
      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BEFORE_BUILD: "pip install -r requirements-dev.txt"
          CIBW_BEFORE_TEST: "pip install -r requirements-dev.txt"
          CIBW_TEST_COMMAND: "pytest {project}/test_graphlib.py"
          # Install curl on manylinux_2 images (others have it) and then install cargo and rust
          CIBW_BEFORE_ALL_LINUX: "((apt-get update && apt-get install curl || true) && (curl --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable)) || apk add rust cargo"
          CIBW_TEST_SKIP: "*-macosx_arm64 *-macosx_universal2:arm64"
          CIBW_BUILD: ${{ matrix.cibw_build }}
          # Skip 32 bit builds because (1) they're broken and (2) take forever in CI
          CIBW_SKIP: "{*-win32*,*_i686}"
          CIBW_ENVIRONMENT_LINUX: 'PATH="$PATH:$HOME/.cargo/bin"'
          # Cross compile on MacOS and Linux
          CIBW_ARCHS_MACOS: "auto universal2 arm64"
          CIBW_ARCHS_LINUX: "auto aarch64"
      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: ./wheelhouse/*.whl
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Lint on earliest and latest
        python: ["3.7", "3.x"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Lint
        run: |
          make lint
  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    needs:
      - sdist
      - build_wheels
      - lint
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: dist
      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install --upgrade twine pip
          twine upload --skip-existing *
